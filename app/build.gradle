apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def cfg = rootProject.ext.configuration //配置
def libs = rootProject.ext.libraries    //第三方库

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.package_name
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name
        vectorDrawables.useSupportLibrary = true

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        manifestPlaceholders = [
                applicationIds     : cfg.package_name,
                JPUSH_PKGNAME      : cfg.package_name,
//                JPUSH_APPKEY       : cfg.JPUSH_APPKEY_DEBUG, //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL      : "developer-default", //暂时填写默认值即可.
                JPUSH_RECEIVER_NAME: "${cfg.package_name}.receiver.JPushReceiver", //根据包名动态修改JPush接收者的路径
        ]
    }

//    signingConfigs {
//        release {
//            storeFile file("${rootProject.keystore_file}")
//            storePassword "${rootProject.store_pwd}"
//            keyAlias "${rootProject.alias_key}"
//            keyPassword "${rootProject.key_pwd}"
//        }
//    }

    buildTypes {
        debug {
            resValue "string", "app_name", "${cfg.debug_app_name}"

            manifestPlaceholders = [
                    JPUSH_APPKEY       : cfg.JPUSH_APPKEY_DEBUG, //JPush上注册的包名对应的appkey.
            ]

//            applicationIdSuffix ".debug"//会影响manifest中的配置，删除的话要及时修改
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }

        release {
            resValue "string", "app_name", "${cfg.release_app_name}"

            manifestPlaceholders = [
                    JPUSH_APPKEY       : cfg.JPUSH_APPKEY_RELEASE, //JPush上注册的包名对应的appkey.
            ]

            //因为正式版加入了混淆，在该工程的混淆文件中记得添加本app的实地类地址，不然解析不了请求的数据
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release

            //apk命名
            android.applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        //这里修改apk文件名
                        def fileName = "${cfg.release_app_name}_${buildType.name}_v${defaultConfig.versionName}_${releaseTime()}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE"
        exclude "META-INF/NOTICE"
        exclude "META-INF/LICENSE.txt"

    }

    //设置虚拟机堆内存空间大小，避免在编译期间OOM
    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }
    //打包不检查
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //导入的android的系统包
//    compile "com.android.support:appcompat-v7:${SUPPORT_LIBRARY}"

    //导入的jar包中的文件
    compile project(path: ':library:common')
    compile project(path: ':library:irecyclerview')
    compile project(path: ':library:retrofitutils')
    compile project(path: ':library:jcvideoplayer')

    //依赖的第三方包

    compile "com.flyco.tablayout:FlycoTabLayout_Lib:${libs.flyco_tablayout}"

    //捕捉crash https://github.com/Sunzxyong/Recovery/blob/master/README.md
    compile "com.zxy.android:recovery:${libs.recovery}"

    //dagger
    compile "com.google.dagger:dagger:${libs.dagger}"
    apt "com.google.dagger:dagger-compiler:${libs.dagger}"
    provided "org.glassfish:javax.annotation:${libs.javax_annotation}"

    //butterknife
    compile "com.jakewharton:butterknife:${libs.butterknief}"//view注解
    apt "com.jakewharton:butterknife-compiler:${libs.butterknief}"

    //日志
    compile "com.elvishew:xlog:${libs.xlog}"

    //Bugly
    compile "com.tencent.bugly:crashreport_upgrade:${libs.bugly}"

    //此处以JPush 3.0.0 版本为例。
    compile "cn.jiguang.sdk:jpush:${libs.jpush}"
    // 此处以JCore 1.0.0 版本为例。
    compile "cn.jiguang.sdk:jcore:${libs.jcore}"


    testCompile 'junit:junit:4.12'
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
